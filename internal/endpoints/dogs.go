// Package endpoints contains http-server endpoints
package endpoints

import (
	"fmt"

	"github.com/google/uuid"
	"github.com/labstack/echo/v4"
	log "github.com/sirupsen/logrus"

	"github.com/moooll/dogs-service/internal/models"

	// echo-swagger middleware import, according to https://github.com/swaggo/echo-swagger#canonical-example
	// "docs is generated by Swag CLI, you have to import it."
	_ "github.com/swaggo/echo-swagger"
)

// Create godoc
// Create endpoint creates new dog
// @Summary Create new dog
// @Description read dog from the request body and write it to the storage
// @ID create-dog
// @Accept  json
// @Produce  json
// @Success 201
// @Failure 400 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /dogs [post]
func (s *Service) Create(c echo.Context) error {
	dog, err := createUpdate(c, s)
	if err != nil {
		log.Error("error creating dog: ", err.Error())
		return err
	}

	er := s.St.Create(dog)
	if er != nil {
		log.Error("error creating dog: ", er.Error())
		return echo.NewHTTPError(500)
	}

	return c.NoContent(201)
}

func createUpdate(c echo.Context, s *Service) (models.Dog, error) {
	dog := models.Dog{}
	err := c.Bind(&dog)
	if err != nil {
		log.Error("error creating dog: ", err.Error())
		return models.Dog{}, echo.NewHTTPError(500)
	}

	vi, e := s.V.validate(dog)
	if e != nil {
		log.Error("error creating dog: "+fmt.Sprint(vi), e.Error())
		return models.Dog{}, echo.NewHTTPError(400, "error creating dog, check the input")
	} else if vi != nil && e == nil {
		log.Error("error creating dog: ", fmt.Sprint(vi))
		return models.Dog{}, echo.NewHTTPError(400, "error creating dog, check the input")
	}

	return dog, nil
}

// Read godoc
// Read endpoint returns a dog by id or 204 if no such dog exists
// @Summary Read a dog by id
// @Description get id from request and return a dog by id from storage
// @ID read-dog
// @Accept  json
// @Produce  json
// @Param id path string true "Dog ID"
// @Success 200 {object} models.Dog
// @Failure 204 {object} echo.HTTPError
// @Router /dogs/{id} [get]
func (s *Service) Read(c echo.Context) error {
	id, err := uuid.Parse(c.Param("id"))
	if err != nil {
		log.Error("error reading dog: ", err.Error())
		return echo.NewHTTPError(204)
	}

	dog, er := s.St.Read(id)
	if er != nil {
		log.Error("error reading dog: ", er.Error())
		return echo.NewHTTPError(204)
	}

	return c.JSON(200, dog)
}

// ReadAll godoc
// ReadAll returns all the dog in the storage
// @Summary Read all dogs
// @Description return all dogs from storage
// @ID read-dogs
// @Produce  json
// @Success 200 {object} array
// @Failure 204 {object} echo.HTTPError
// @Router /dogs [get]
func (s *Service) ReadAll(c echo.Context) error {
	dogs, err := s.St.ReadAll()
	if err != nil {
		log.Error("error reading all dogs: ", err.Error())
		return echo.NewHTTPError(204)
	}

	return c.JSON(200, dogs)
}

// Update godoc
// Update updates the dog by id to what provided in body, and if no such dog exists, creates it
// @Summary Update the dog by id
// @Description read dog from the request body and update it in the storage, or create if not exist
// @ID update-dog
// @Accept  json
// @Produce  json
// @Success 200
// @Failure 400 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /dogs [put]
func (s *Service) Update(c echo.Context) error {
	dog, err := createUpdate(c, s)
	if err != nil {
		log.Error("error updating dog: ", err.Error())
		return err
	}

	er := s.St.Update(dog)
	if er != nil {
		log.Error("error updating dog: ", er.Error())
		return echo.NewHTTPError(500)
	}

	return c.NoContent(200)
}

// Delete godoc
// Delete deletes a dog by id
// @Summary Delete a dog by id
// @Description get id from request and delete a dog by id from storage
// @ID delete-dog
// @Accept  json
// @Produce  json
// @Param id path string true "Dog ID"
// @Success 200
// @Failure 204 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /dogs/{id} [get]
func (s *Service) Delete(c echo.Context) error {
	id, err := uuid.Parse(c.Param("id"))
	if err != nil {
		log.Error("error deleting dog: ", err.Error())
		return echo.NewHTTPError(500)
	}

	er := s.St.Delete(id)
	if er != nil {
		log.Error("error deleting dog: ", er.Error())
		return echo.NewHTTPError(500)
	}

	return c.NoContent(200)
}
